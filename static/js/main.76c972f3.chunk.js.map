{"version":3,"sources":["api/api.js","api/index.js","constant/index.js","components/ProgressBar/index.js","components/styled/Flex.js","components/Button/index.js","components/Container/index.js","App.js","serviceWorker.js","index.js"],"names":["HttpException","message","status","statusText","url","ErrorCode","data","Error","Api","baseUri","token","useFormData","this","credentials","length","headersBuilder","newToken","headers","Authorization","method","path","newBody","JSON","stringify","fetchOption","mode","body","fetch","then","response","ok","json","_err","metaError","result","paramsString","querystring","fullpath","callApi","getData","Border","styled","div","Innerdiv","props","percentage","color","Textdiv","ProgressBar","limit","Wrap","display","flexDirection","flex","flexbox","flexBasis","flexWrap","justifyContent","alignItems","Flex","children","Button","button","onClick","Container","Loader","loading","Headline","h1","App","useState","buttonValues","setButtonValues","barValues","setBarValues","setLoading","setLimit","currentIndex","setCurrentIndex","useEffect","api","buttons","bars","catch","err","console","log","style","height","map","barValue","index","key","buttonValue","num","item","margin","value","onChange","e","Number","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.76c972f3.chunk.js","sourcesContent":["import querystring from \"query-string\";\n\nexport class HttpException extends Error {\n  constructor({message, status, statusText, url, ErrorCode, data} = {}) {\n    super(message);\n    this.status = status;\n    this.statusText = statusText;\n    this.url = url;\n    this.ErrorCode = ErrorCode;\n    this.data = data;\n  }\n}\n\nexport default class Api {\n  constructor({baseUri, token, useFormData = false}) {\n    this.baseUri = baseUri || \"\";\n    this.credentials = token && token.length > 0 ? token : null;\n    this.useFormData = useFormData;\n    this.headersBuilder = newToken => {\n      var token = newToken || this.credentials;\n      const headers = {};\n      if (!this.useFormData) {\n        headers[\"Content-Type\"] = \"application/json\";\n      }\n      if (token) {\n        headers.Authorization = token;\n      }\n      return headers;\n    };\n  }\n\n  callApi({method, path, data, newToken = null}) {\n    const newBody = JSON.stringify(data);\n    const fetchOption = {\n      method: method,\n      mode: \"cors\",\n      headers: this.headersBuilder(newToken),\n      body: data !== null ? newBody : null,\n    };\n    return fetch(this.baseUri + path, fetchOption).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else if (response.status === 500) {\n        const _err = {\n          message: \"System Error\",\n          ErrorCode: response.status,\n          status: response.status,\n          statusText: `HttpException[${method}]`,\n        };\n        throw new HttpException({..._err});\n      } else if (response.status === 400) {\n        const _err = {\n          message: \"Bad Request\",\n          ErrorCode: response.status,\n          status: response.status,\n          statusText: `HttpException[${method}]`,\n        };\n        throw new HttpException({..._err});\n      } else {\n        return response.json().then(metaError => {\n          throw new HttpException({\n            message: metaError.message || metaError.result,\n            ErrorCode: response.status,\n            status: response.status,\n            statusText: `HttpException[${method}]`,\n          });\n        });\n      }\n    });\n  }\n\n  getData({path, data = {}}) {\n    const paramsString = querystring.stringify(data);\n\n    const fullpath = path + (paramsString === \"\" ? \"\" : \"?\" + paramsString);\n    return this.callApi({\n      method: \"GET\",\n      path: fullpath,\n      data: null,\n    });\n  }\n\n  postData({path, data}) {\n    return this.callApi({\n      method: \"POST\",\n      path,\n      data,\n    });\n  }\n\n  putData({path, data}) {\n    return this.callApi({\n      method: \"PUT\",\n      path,\n      data,\n    });\n  }\n\n  deleteData({path, data}) {\n    return this.callApi({\n      method: \"DELETE\",\n      path,\n      data,\n    });\n  }\n}\n","import Api from \"./api\";\nimport { API_ENDPOINT as baseUri } from \"../constant\";\n\nexport default {\n  getProgressBarData: () => {\n    return new Api({ baseUri }).getData({})\n  }\n};\n","export const API_ENDPOINT = \"http://pb-api.herokuapp.com/bars\";\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Border = styled.div`\n  border-radius: 10px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\n  transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);\n`;\n\nconst Innerdiv = styled(Border)`\n  background-color: ${props =>\n    props.percentage > 100 ? \"#ff2e63\" : props.color};\n  width: ${props =>\n    props.percentage > 100\n      ? 100\n      : props.percentage < 0\n      ? 0\n      : props.percentage}%;\n  height: 20px;\n  left: 0;\n  top: 0;\n`;\n\nconst Textdiv = styled(Border)`\n  width: 100%;\n  height: 20px;\n  top: 0;\n  left: 0;\n  position: absolute;\n`;\n\nconst ProgressBar = styled(Border)`\n  position: relative;\n  height: 20px;\n  text-align: center;\n  width: 300px;\n  margin: 16px 0;\n`;\n\nexport default ({ percentage, color, limit }) => {\n  return (\n    <ProgressBar>\n      <Innerdiv color={color} percentage={percentage} />\n      <Textdiv>\n        {percentage > limit ? limit : percentage < 0 ? 0 : percentage}%\n      </Textdiv>\n    </ProgressBar>\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport {flex, flexDirection, flexbox, flexBasis, flexWrap, justifyContent, alignItems} from \"styled-system\";\n\nconst Wrap = styled.div(\n  {display: \"flex\", flexDirection: \"column\"},\n  flex,\n  flexDirection,\n  flexbox,\n  flexBasis,\n  flexWrap,\n  justifyContent,\n  alignItems,\n);\n\nconst Flex = ({children, ...props}) => <Wrap {...props}> {children}</Wrap>;\n\nexport default Flex;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Button = styled.button`\n  padding: 4px 12px;\n  display: inline-block;\n  cursor: pointer;\n  border: 1px solid #bbb;\n  overflow: visible;\n  color: #fff;\n  text-shadow: 0 1px 0\n  white-space: nowrap;\n  border-radius: 5px;\n  background-color: #269CE9;\n  border-color: #269CE9\n &:hover{\n  background-color: #70B9E8;\n  color: #555;\n}\n\n&:active{\n  background: #269CE9;\n  position: relative;\n  top: 1px;\n  text-shadow: none;\n  box-shadow: 0 1px 1px rgba(0, 0, 0, .3) inset;\n}\n`;\n\nexport default ({ onClick = () => {}, children }) => {\n  return <Button onClick={onClick}>{children}</Button>;\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100vh;\n  background: rgba(0, 0, 0, 0.8);\n  z-index: 999;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Loader = styled.div`\n  border: 5px  solid #f3f3f3;\n  border-top: 5px solid #3498db;\n  border-radius: 50%;\n  width: 20px;\n  height: 20px;\n  animation: spin 2s linear infinite;\n  @keyframes spin {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nexport default ({ loading, children }) => {\n  return (\n    <div>\n      {loading ? (\n        <Container>\n          <Loader />\n        </Container>\n      ) : (\n        children\n      )}\n    </div>\n  );\n};\n","import React, {useState, useEffect} from \"react\";\nimport api from \"./api\";\nimport styled from \"styled-components\";\nimport ProgressBar from \"./components/ProgressBar\";\nimport Flex from \"./components/styled/Flex\";\nimport Button from \"./components/Button\";\nimport Container from \"./components/Container\";\n\nconst Headline = styled.h1``;\n\nfunction App() {\n  let [buttonValues, setButtonValues] = useState([]);\n  let [barValues, setBarValues] = useState([]);\n  let [loading, setLoading] = useState(false);\n  let [limit, setLimit] = useState(0);\n  let [currentIndex, setCurrentIndex] = useState(0);\n\n  useEffect(() => {\n    setLoading(true);\n    api\n      .getProgressBarData()\n      .then(response => {\n        const {buttons, bars, limit} = response;\n        setButtonValues(buttons);\n        setBarValues(bars);\n        setLoading(false);\n        setLimit(limit);\n      })\n      .catch(err => {\n        console.log(err);\n        setLoading(false);\n      });\n  }, []);\n\n  const handleButtonClick = num => {\n    setBarValues(\n      barValues.map((item, index) => {\n        if (index === currentIndex) {\n          if (num + item > limit) {\n            return limit;\n          } else if (num + item < 0) {\n            return 0;\n          } else {\n            return num + item;\n          }\n        } else {\n          return item;\n        }\n      }),\n    );\n  };\n\n  return (\n    <Container loading={loading}>\n      <Flex justifyContent=\"center\" alignItems=\"center\" style={{height: \"100vh\"}}>\n        <div>\n          <Headline>Progress Bars Demo</Headline>\n          {/* Should not set key as index here */}\n          <Flex>\n            {barValues.map((barValue, index) => {\n              return <ProgressBar percentage={barValue} color=\"#6497b1\" limit={limit} key={index} />;\n            })}\n          </Flex>\n          <Flex flexDirection=\"row\" justifyContent=\"space-between\">\n            {buttonValues.map((buttonValue, index) => {\n              return (\n                <Button\n                  key={index}\n                  onClick={() => {\n                    handleButtonClick(buttonValue);\n                  }}>\n                  {buttonValue}\n                </Button>\n              );\n            })}\n          </Flex>\n          <div style={{margin: \"10px\"}}></div>\n          <select value={currentIndex} onChange={e => setCurrentIndex(Number(e.target.value))}>\n            {barValues.map((barValue, index) => {\n              return <option key={index} value={index}>{`Progress bar #${index + 1}`}</option>;\n            })}\n          </select>\n        </div>\n      </Flex>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {\"Service-Worker\": \"script\"},\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./styles/index.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}